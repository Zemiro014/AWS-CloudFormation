AWSTemplateFormatVersion: "2010-09-09"
Description: Step 5 - VPC + ALB + AutoScaling Group + RDS

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment Name (dev, staging, prd)

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR

  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR of Public Subnet 1

  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR of Public Subnet 2

  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR of Private Subnet 1

  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR of Private Subnet 2

  AllowedHttpCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: Who can access the ALB(HTTP). use your IP/32 in production

  KeyName: 
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key Pair Name to access the SSH (Should be created already)

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    Description: AMI do Amazon Linux 2023 via SSM Parameter (mantida pela AWS)

  CreateRDS:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
    Description: Se "true", cria um RDS PostgreSQL em uma das subnets privadas (apenas lab)

  DBName:
    Type: String
    Default: appdb

  DBUserName:
    Type: String
    Default: Admin
    Description: DB user name

  DBPassword:
    Type: String
    NoEcho: true
    Description: Data Base Password

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.small
      - t2.micro
      - t3.small
      - t3.micro
    Description: EC2 Instance Type

  DesiredCapacity:
    Type: Number
    Default: 2
  MinSize:
    Type: Number
    Default: 2
  MaxSize:
    Type: Number
    Default: 4

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c55b159cbfafe1f0
    us-east-2:
      AMI: ami-08962a4068733a2b6
    sa-east-1:
      AMI: ami-02556f6726aa38019

Conditions:
  HasKeyPair: !Not [!Equals [!Ref KeyName, ""]]
  WillCreateRDS: !Equals [!Ref CreateRDS, "true"]

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Value: !Sub "${EnvironmentName}-myVpc"
          Key: Key

  MyInternateGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-myIg"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternateGateway

  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Value: !Sub "${EnvironmentName}-publicSubnet1"
          Key: Name

  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Value: !Sub "${EnvironmentName}-publicSubnet2"
          Key: Name

  MyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Value: !Sub "${EnvironmentName}-privateSubnet1"
          Key: Name

  MyPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Value: !Sub "${EnvironmentName}-privateSubnet2"
          Key: Name

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Value: !Sub "${EnvironmentName}-publicRT"
          Key: Name

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternateGateway

  PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref MyPublicSubnet1

  PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref MyPublicSubnet2

  EipForNat:
    Type: AWS::EC2::EIP
    Properties:
      Domain: MyVPC

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipForNat.AllocationId
      SubnetId: !Ref MyPublicSubnet1
      Tags:
        - Value: !Sub "${EnvironmentName}-natGw"
          Key: Name

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Value: !Sub "${EnvironmentName}-privateRT"
          Key: Name

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref MyPrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref MyPrivateSubnet2
      
  # Security Group
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB HTTP Inbound
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedHttpCidr
      Tags:
        - Value: !Sub "${EnvironmentName}-alb-sg"
          Key: Name

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Instance - Inbound only from ALB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      Tags:
        - Value: !Sub "${EnvironmentName}-private-sg"
          Key: Name

  # ---------------------- IAM (SSM) ----------------------
  AppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: {Service: ec2.amazonaws.com}
            Action: sts:AssumeRole
      ManagedPloicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-private-role"

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AppInstanceRole

  # -------------------------- ALB / TG / LISTENER ---------------
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckPath: /
      Matcher: { HttpCode: '200-399'}
      Tags: [{Key: Name, Value: !Sub '${EnvironmentName}-tg'}]

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: [!Ref MyPublicSubnet1, !Ref MyPublicSubnet2]
      SecurityGroups: [!Ref AlbSecurityGroup]
      Tags: [{Key: Name, Value: !Sub '${EnvironmentName}-alb'}]

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

  # --------------------- LAUNCH Template + ASG -----
  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile: {Arn: !GetAtt AppInstanceProfile.Arn}
        SecurityGroupIds: [!Ref AppSecurityGroup]
        KeyName: !If [HasKeyPair, !Ref KeyName, !Ref 'AWS::NoValue']
        UserData: !Base64 
          #!/bin/bash
          set -euxo pipefail
          dnf -y update
          dnf -y install nginx
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id || true)
          PRIVATE_IP=$(hostname -I | awk '{print $1}')
          cat > /usr/share/nginx/html/index.html << 'HTML'
          <html>
            <head><title>Step 5 – App</title></head>
            <body>
              <h1>App online (ASG)</h1>
              <p> Instância= ${INSTANCE_ID} </p>
              <p>IP privado= ${PRIVATE_IP}</p>
            </body>
          </html>
          HTML
          systemctl enable nginx
          systemctl start nginx

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      VPCZoneIdentifier:
        - !Ref MyPrivateSubnet1
        - !Ref MyPrivateSubnet2
      LaunchTemplate:
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
        LaunchTemplateId: !Ref AppLaunchTemplate
      DesiredCapacity: !Ref DesiredCapacity
      TargetGroupARNs:
        - !Ref DesiredCapacity
      HealthCheckType: EC2
      HealthCheckGracePeriod: 60
      Tags:
        - Value: !Sub '${EnvironmentName}-app-asg'
          Key: Name
          PropagateAtLaunch: true

  CpuTargetTracking:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 50
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization

  # -------------- (Opcional) RDS para LAB ----------------------
  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: WillCreateRDS
    Properties:
      DBSubnetGroupDescription: RDS Subnet (Uses the APP Subnets)
      SubnetIds:
        - !Ref MyPrivateSubnet1
        - !Ref MyPrivateSubnet2
          