AWSTemplateFormatVersion: "2010-09-09"
Description: "Step 4 - VPC with Public(WEB) and Private(DB) Subnet; EC2 and RDS. Domonstrate 2-tier arquitecture (App + DB)"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment Name (dev, staging, prd)

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR

  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
    Description: Public Subnet

  PrivateSubnetCidr1:
    Type: String
    Default: 10.0.2.0/24
    Description: Private Subnet to Data Base

  PrivateSubnetCidr2:
    Type: String
    Default: 10.0.3.0/24
    Description: Private Subnet to Data Base

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: EC2 Instance Type

  DBUser:
    Type: String
    Default: admin
    Description: Data Base User Name

  DBPassword:
    NoEcho: true
    Type: String
    Description: Data Base Password

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key Pair Name to access the SSH (Should be created already)

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c55b159cbfafe1f0
    us-east-2:
      AMI: ami-08962a4068733a2b6
    sa-east-1:
      AMI: ami-02556f6726aa38019

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Value: !Sub "${EnvironmentName}-myVpc"
          Key: Name

  # Internate Gateway + Attachment
  MyInternateGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-myIg"
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternateGateway

  # Subnets
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Value: !Sub "${EnvironmentName}-myPublicSunet"
          Key: Name

  MyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnetCidr1
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Value: !Sub "${EnvironmentName}-myPrivateSubnet1"
          Key: Name
  
  MyPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnetCidr2
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Value: !Sub "${EnvironmentName}-myPrivateSubnet2"
          Key: Name

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Value: !Sub "${EnvironmentName}-rt"
          Key: Name

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternateGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref MyPublicSubnet

  # Security Groups
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access HTTP and SSH to Web Server 
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Value: !Sub "${EnvironmentName}-webSg"
          Key: Name

  DataBaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to MySQL only from Web
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebSecurityGroup
      Tags:
        - Value: !Sub "${EnvironmentName}-dbSg"
          Key: Name

  # EC2
  MyEc2:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref MyPublicSubnet
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-webServer"

  # RDS Database
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group to Database
      SubnetIds: 
        - !Ref MyPrivateSubnet1
        - !Ref MyPrivateSubnet2

  MyDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      Engine: mysql
      EngineVersion: "8.0"
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref DataBaseSecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      PubliclyAccessible: false
      MultiAZ: false
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-rds"

Outputs:
  VpcId:
    Description: VPC ID Created
    Value: !Ref MyVPC

  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref MyPublicSubnet

  Ec2PublicIP:
    Description: EC2 Public IP
    Value: !GetAtt MyEc2.PublicIp

  RDSInstance:
    Description: Database Endpoint
    Value: !GetAtt  MyDatabase.Endpoint.Address