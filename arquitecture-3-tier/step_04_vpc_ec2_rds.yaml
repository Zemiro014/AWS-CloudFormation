AWSTemplateFormatVersion: "2010-09-09"
Description: "Step 4 - VPC with Public(WEB) and Private(DB) Subnet; EC2 and RDS. Domonstrate 2-tier arquitecture (App + DB)"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment Name (dev, staging, prd)

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR

  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
    Description: Public Subnet

  PrivateSubnetCidr:
    Type: String
    Default: 10.0.2.0/24
    Description: Private Subnet to Data Base

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: EC2 Instance Type

  DBUser:
    Type: String
    Default: admin
    Description: Data Base User Name

  DBPasswword:
    NoEcho: true
    Type: String
    Description: Data Base Password

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Value: !Sub "${EnvironmentName}-myVpc"
          Key: Name

  # Internate Gateway + Attachment
  MyInternateGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-myIg"
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternateGateway

  # Subnets
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Value: !Sub "${EnvironmentName}-myPublicSunet"
          Key: Name

  MyPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref MyPrivateSubnet
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Value: !Sub "${EnvironmentName}-myPrivateSubnet"
          Key: Name

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Value: !Sub "${EnvironmentName}-rt"
          Key: Name

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternateGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref MyPublicSubnet

  # Security Groups
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access HTTP and SSH to Web Server 
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Value: !Sub "${EnvironmentName}-webSg"
          Key: Name

  DataBaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to MySQL only
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebSecurityGroup
      Tags:
        - Value: !Sub "${EnvironmentName}-dbSg"
          Key: Name